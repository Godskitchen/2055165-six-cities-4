openapi: 3.0.2
info:
  title: API сервер для проекта "Six cities"
  version: version 4.0
tags:
  - name: users
    description: описание действий с пользователями
  - name: rent-offers
    description: описание действий с объявлениями
  - name: comments
    description: описание действий с комментариями к объявлениям
paths:
  /users/register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Создание нового пользователя. E-Mail должен быть уникальным.
      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserData"
        required: true

      responses:
        "201":
          description:
            Пользователь зарегистрирован. Возвращает объект пользователя с присвоенным по-умолчанию статусом "обычный".
            Также по-умолчанию присваивается аватар.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        "409":
          description: Пользователь с таким email уже существует.

  /users/{userId}/avatar:
    put:
      tags:
        - users
      summary: Загрузить изображение аватара
      security:
        - tokenAuth: []
      description: Загружает изображение аватара пользователя. Изображение
        аватара должно быть в формате 'png' или 'jpg'.
      requestBody:
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary

      responses:
        "200":
          description: Изображение успешно загружено. Возвращает обновленный объект пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        "401":
          description: Некорректный формат изображения.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedUploadAvatarMessage'

  /users/auth:
    post:
      tags:
        - users
      summary: Авторизация пользователя
      description: Авторизует пользователя на основе логина и пароля
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/RequestAuth'

        required: true

      responses:
        "200":
          description:
            Успешная проверка логина и пароля зарегистрированного пользователя.
            Возвращает объект пользователя с присвоенным токеном.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUser'

        "401":
          description: Пользователь с таким email не существует.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedAuthErrorMessage'

    get:
      tags:
        - users
      summary: Проверка состояния авторизации пользователя.
      description: Возвращает информацию по авторизованному пользователю.
      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=

      responses:
        '200':
          description: Информация об успешной авторизации пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUser'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/checkAuthErrorMessage'
      security:
        - tokenAuth: []

  /users/logout:
    delete:
      tags:
        - users
      summary: Завершить сеанс пользователя
      security:
        - tokenAuth: []
      description: Завершает сеанс работы — выход из закрытой части приложения.
      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=
      responses:
        '200':
          description: Сеанс пользователя завершён

        '401':
          description: Ошибка завершения сеанса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logOutErrorMessage'


  /rent-offers:
    post:
      tags:
        - rent-offers
      summary: Создать новое предложение
      security:
        - tokenAuth: []
      description: Создание новоего предложения доступно только авторизованным пользователям.
      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=
      requestBody:
        description: Передача информации о новом предложении.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentOfferData'

      responses:
        '200':
          description: возвращает объект с информацией о созданном предложениии с присвоенным id и датой создания.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentOfferFullInfo'

        '401':
          description: ошибка при создании предложения
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationOfferErrorMessage'


    get:
      tags:
        - rent-offers
      summary: Получить список предложений
      description: Получение списка доступных предложений.
      responses:
        '200':
          description: Массив предложений.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/RentOfferBasicInfo'

  /rent-offers/{offerId}:
    get:
      tags:
      - rent-offers
      summary: Получение информации о предложении
      security:
        - tokenAuth: []
      description: Получение детальной информации о предложении.
      responses:
        '200':
          description: Объект предложения
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentOfferFullInfo'

        '404':
          description: Предложение не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offerNotFoundMessage'

    patch:
      tags:
      - rent-offers
      summary: Обновление информации о предложении пользователем
      security:
        - tokenAuth: []
      description: Редактировать предложения могут только авторизованные пользователи и только предложения, созданные ими.
      parameters:
        - name: X-Token
          in: header
          description: Авторизационный токен пользователя
          required: true
          schema:
            type: string
            example: T2xpdmVyLmNvbm5lckBnbWFpbC5jb20=
      requestBody:
        content:
          # application/json:
          #   schema:
          #     $ref: '#/components/schemas/RentOfferData'
          anyOf:
            - schema:
              type: string
              example: 123

      responses:
        '200':
          description: Обновленный объект предложения
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentOfferFullInfo'

        '400':
          description: Ошибка при редактировании предложения другого пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/editOfferErrorMessage'

        '401':
          description: ошибка при редактировании предложения
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationOfferErrorMessage'


components:
  schemas:
  #User schemas'
    UserData:
      type: object
      properties:
        email:
          type: string
          example: test@somemail.com
        username:
          type: string
          example: SomeNick
        password:
          type: string
          example: qwerty123

    User:
      type: object
      properties:
        id:
          type: number
          example: 6329c3d6a04ab1061c6425ea
        email:
          type: string
          example: test@somemail.com
        username:
          type: string
          example: SomeNick
        status:
          type: string
          enum:
            - обычный
            - pro
          example: обычный
        avatarPath:
          type: string
          format: binary
          example: /static/avatar/3.jpg

    RequestAuth:
      type: object
      properties:
        email:
          type: string
          example: test@somemail.com
        password:
          type: string
          example: qwerty123

    AuthUser:
      type: object
      properties:
        id:
          type: number
          example: 6329c3d6a04ab1061c6425ea
        email:
          type: string
          example: test@somemail.com
        username:
          type: string
          example: SomeNick
        status:
          type: string
          example: обычный
        avatarPath:
          type: string
          example: /static/avatar/3.jpg
        authToken:
          type: string
          example: "T2xpdmVyLmNvbm5lckBnbWFpbC5jb20="

    failedUploadAvatarMessage:
      type: object
      properties:
        errorMessage:
          type: string
          example: Некорректный формат изображения. Поддерживаемые форматы '.jpg' и '.png'.

    checkAuthErrorMessage:
      type: object
      properties:
        errorMessage:
          type: string
          example: Пользователь не авторизован.

    failedAuthErrorMessage:
      type: object
      properties:
        errorMessage:
          type: string
          example: Пользователь с таким email не существует.

    logOutErrorMessage:
      type: object
      properties:
        errorMessage:
          type: string
          example: Ошибка запроса.


    #Rent offer schemas'
    RentOfferData:
      type: object
      properties:
        title:
          type: string
          example: Beautiful & luxurious studio at great location
        description:
          type: string
          example: A quiet cozy and picturesque that hides behind a a river by the unique lightness of Amsterdam.
        city:
          type: string
          enum:
            - Paris
            - Cologne
            - Brussels
            - Amsterdam
            - Hamburg
            - Dusseldorf
          example: Amsterdam
        previewImage:
          type: string
          example: preview-img/1.png
        images:
          type: array
          example:
            - img/1.png
            - img/2.png
            - img/3.png
        isPremium:
          type: boolean
          example: false
        isFavorite:
          type: boolean
          example: true
        rating:
          type: number
          example: 4.8
        type:
          type: string
          enum:
            - apartment
            - house
            - room
            - hotel
          example: apartment
        bedrooms:
          type: number
          example: 3
        maxAdults:
          type: number
          example: 4
        price:
          type: number
          example: 120
        goods:
          type: array
          enum:
            - Breakfast
            - Air conditioning
            - Laptop
            - Friendly workspace
            - Baby seat
            - Washer
            - Towels
            - Fridge
          example:
            - Heating
            - Washer
        location:
          type: object
          properties:
            latitude:
              type: number
              example: 52.35514938496378
            longitude:
              type: number
              example: 4.673877537499948

    RentOfferBasicInfo:
      type: object
      properties:
        id:
          type: number
          example: 3452443
        offerDate:
          type: string
          example: "Sat May 27 2023 13:13:43 GMT+0300 (Москва, стандартное время)"
        commentsCount:
          type: number
          example: 50
        title:
          type: string
          example: Beautiful & luxurious studio at great location
        city:
          type: string
          example: Amsterdam
        previewImage:
          type: string
          example: preview-img/1.png
        isPremium:
          type: boolean
          example: false
        isFavorite:
          type: boolean
          example: true
        rating:
          type: number
          example: 4.8
        type:
          type: string
          example: apartment
        price:
          type: number
          example: 120



    RentOfferFullInfo:
      type: object
      properties:
        id:
          type: number
          example: 3454353
        offerDate:
          type: string
          example: "Sat May 27 2023 13:13:43 GMT+0300 (Москва, стандартное время)"
        commentsCount:
          type: number
          example: 50
        rentOffer:
          type: object
          $ref: '#/components/schemas/RentOfferData'
        advertiser:
          type: object
          $ref: '#/components/schemas/User'



    validationOfferErrorMessage:
      type: object
      properties:
        errorMessage:
          type: string
          example: Невозможно создать/обновить предложение. Проверьте данные

    offerNotFoundMessage:
      type: object
      properties:
        errorMessage:
          type: string
          example: Предложение не найдено.

    editOfferErrorMessage:
      type: object
      properties:
        errorMessage:
          type: string
          example: Вы не можете редактировть предложения других пользователей.



  securitySchemes:
    tokenAuth:
      type: apiKey
      name: X-Token
      in: header

